# Based on
# <https://github.com/dandi/dandiarchive/blob/master/docker/docker-compose.yml>,
# <https://github.com/dandi/dandi-api/blob/master/docker-compose.yml>, and
# <https://github.com/dandi/dandi-api/blob/master/docker-compose.override.yml>,
# but using images uploaded to Docker Hub instead of building them locally.

version: '2.1'

services:
  django:
    image: dandiarchive/dandiarchive-api
    command: ["./manage.py", "runserver", "--nothreading", "0.0.0.0:8000"]
    # Log printing via Rich is enhanced by a TTY
    tty: true
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      DJANGO_CELERY_BROKER_URL: amqp://rabbitmq:5672/
      DJANGO_CONFIGURATION: DevelopmentConfiguration
      DJANGO_DANDI_DANDISETS_BUCKET_NAME: dandi-dandisets
      DJANGO_DANDI_DANDISETS_LOG_BUCKET_NAME: dandiapi-dandisets-logs
      DJANGO_DANDI_DANDISETS_EMBARGO_BUCKET_NAME: dandi-embargoed-dandisets
      DJANGO_DANDI_DANDISETS_EMBARGO_LOG_BUCKET_NAME: dandiapi-embargo-dandisets-logs
      DJANGO_DATABASE_URL: postgres://postgres:postgres@postgres:5432/django
      DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
      DJANGO_MINIO_STORAGE_ENDPOINT: minio:9000
      DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
      DJANGO_STORAGE_BUCKET_NAME: django-storage
      DJANGO_MINIO_STORAGE_MEDIA_URL: http://localhost:9000/django-storage
      DJANGO_DANDI_SCHEMA_VERSION:
      DJANGO_DANDI_WEB_APP_URL: http://localhost:8085
      DJANGO_DANDI_API_URL: http://localhost:8000
      DJANGO_DANDI_JUPYTERHUB_URL: https://hub.dandiarchive.org
      DANDI_ALLOW_LOCALHOST_URLS: "1"
    ports:
      - "8000:8000"

  celery:
    image: dandiarchive/dandiarchive-api
    command: [
      "celery",
      "--app", "dandiapi.celery",
      "worker",
      "--loglevel", "INFO",
      "--without-heartbeat",
      "-Q","celery,calculate_sha256,ingest_zarr_archive,manifest-worker",
      "-c","1",
      "-B"
    ]
    # Docker Compose does not set the TTY width, which causes Celery errors
    tty: false
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      DJANGO_CELERY_BROKER_URL: amqp://rabbitmq:5672/
      DJANGO_CONFIGURATION: DevelopmentConfiguration
      DJANGO_DANDI_DANDISETS_BUCKET_NAME: dandi-dandisets
      DJANGO_DANDI_DANDISETS_LOG_BUCKET_NAME: dandiapi-dandisets-logs
      DJANGO_DANDI_DANDISETS_EMBARGO_BUCKET_NAME: dandi-embargoed-dandisets
      DJANGO_DANDI_DANDISETS_EMBARGO_LOG_BUCKET_NAME: dandiapi-embargo-dandisets-logs
      DJANGO_DATABASE_URL: postgres://postgres:postgres@postgres:5432/django
      DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
      DJANGO_MINIO_STORAGE_ENDPOINT: minio:9000
      DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
      DJANGO_STORAGE_BUCKET_NAME: django-storage
      DJANGO_MINIO_STORAGE_MEDIA_URL: http://localhost:9000/django-storage
      DJANGO_DANDI_SCHEMA_VERSION:
      DJANGO_DANDI_VALIDATION_JOB_INTERVAL: "5"
      DJANGO_DANDI_WEB_APP_URL: http://localhost:8085
      DJANGO_DANDI_API_URL: http://localhost:8000
      DJANGO_DANDI_JUPYTERHUB_URL: https://hub.dandiarchive.org
      DANDI_ALLOW_LOCALHOST_URLS: "1"

  minio:
    image: minio/minio:RELEASE.2022-04-12T06-55-35Z
    # When run with a TTY, minio prints credentials on startup
    tty: true
    command: ["server", "/data"]
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minioAccessKey
      MINIO_SECRET_KEY: minioSecretKey
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 7s
      timeout: 3s
      retries: 5

  postgres:
    environment:
      POSTGRES_DB: django
      POSTGRES_PASSWORD: postgres
    image: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 7s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
