# Based on
# <https://github.com/dandi/dandiarchive/blob/master/docker/docker-compose.yml>,
# <https://github.com/dandi/dandi-api/blob/master/docker-compose.yml>, and
# <https://github.com/dandi/dandi-api/blob/master/docker-compose.override.yml>,
# but using images uploaded to Docker Hub instead of building them locally.

version: '2.1'

services:
  mongo:
    image: mongo:latest
    volumes:
      - dandi_girder_mongo_db:/data/db

  girder:
    image: dandiarchive/dandiarchive-girder
    volumes:
      - dandi_girder_assetstore:/home/assetstore
    depends_on:
      - mongo
    ports:
      - "8081:8080"

  client:
    image: dandiarchive/dandiarchive-client
    depends_on:
      - girder
    ports:
      - "8086:80"
    #environment:
    #  VUE_APP_API_ROOT: http://localhost:8081/api/v1

  provision:
    image: dandiarchive/dandiarchive-provision
    depends_on:
      - client
      - girder

  redirector:
    image: dandiarchive/dandiarchive-redirector
    depends_on:
      - client
      - girder
    ports:
      - "8079:8080"
    environment:
      GIRDER_URL: http://localhost:8081
      GUI_URL: http://localhost:8086
      ABOUT_URL: http://www.dandiarchive.org
      PUBLISH_API_URL: http://localhost:8000/api

  django:
    image: dandiarchive/dandiarchive-api
    command: ["./manage.py", "runserver", "--nothreading", "0.0.0.0:8000"]
    # Log printing via Rich is enhanced by a TTY
    tty: true
    depends_on:
      girder:
        condition: service_started
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      DJANGO_CELERY_BROKER_URL: amqp://rabbitmq:5672/
      DJANGO_CONFIGURATION: DevelopmentConfiguration
      DJANGO_DANDI_DANDISETS_BUCKET_NAME: dandi-dandisets
      DJANGO_DANDI_GIRDER_API_URL:
      DJANGO_DANDI_GIRDER_API_KEY:
      DJANGO_DATABASE_URL: postgres://postgres:postgres@postgres:5432/django
      DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
      DJANGO_MINIO_STORAGE_ENDPOINT: minio:9000
      DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
      DJANGO_STORAGE_BUCKET_NAME: django-storage
      DJANGO_MINIO_STORAGE_MEDIA_URL: http://localhost:9000/django-storage
      DJANGO_DANDI_SCHEMA_VERSION: 1.0.0-rc1
    ports:
      - "8000:8000"

  celery:
    image: dandiarchive/dandiarchive-api
    command: [
      "celery",
      "--app", "dandiapi.celery",
      "worker",
      "--loglevel", "INFO",
      "--without-heartbeat"
    ]
    # Docker Compose does not set the TTY width, which causes Celery errors
    tty: false
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      DJANGO_CELERY_BROKER_URL: amqp://rabbitmq:5672/
      DJANGO_CONFIGURATION: DevelopmentConfiguration
      DJANGO_DANDI_DANDISETS_BUCKET_NAME: dandi-dandisets
      DJANGO_DANDI_GIRDER_API_URL:
      DJANGO_DANDI_GIRDER_API_KEY:
      DJANGO_DATABASE_URL: postgres://postgres:postgres@postgres:5432/django
      DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
      DJANGO_MINIO_STORAGE_ENDPOINT: minio:9000
      DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
      DJANGO_STORAGE_BUCKET_NAME: django-storage
      DJANGO_MINIO_STORAGE_MEDIA_URL: http://localhost:9000/django-storage
      DJANGO_DANDI_SCHEMA_VERSION: 1.0.0-rc1

  minio:
    image: minio/minio:latest
    # When run with a TTY, minio prints credentials on startup
    tty: true
    command: ["server", "/data"]
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minioAccessKey
      MINIO_SECRET_KEY: minioSecretKey
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 7s
      timeout: 3s
      retries: 5

  postgres:
    environment:
      POSTGRES_DB: django
      POSTGRES_PASSWORD: postgres
    image: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 7s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"

volumes:
  dandi_girder_mongo_db:
  dandi_girder_assetstore:
